index:

  name: basic_index

  stages:
    - stage: Preprocessor
      steps:
        - step: OCPreprocessor
          name: simple_pre_processor
          step_args:
            add_punctuation: false
            remove_whitespace: false
          depends_on: [ ]

    - stage: Chunker
      steps:
        - step: OCChunker
          name: simple_chunker
          step_args:
            chunk_size_words: 320
            chunk_overlap: 30
            split_by: word
            split_respect_sentence_boundary: true
            hard_split_max_chars: 2400
          depends_on: [ simple_pre_processor ]

    - stage: Embedder
      steps:
        - step: SentenceTransformerEmbedder
          name: sentence-transformers
          step_args:
            model_name: BAAI/bge-base-en-v1.5
            batch_size: 4
            include_metadata: [ title, file_name ]
          depends_on: [ simple_chunker ]

    - stage: Scorer
      steps:
        - step: LexRank
          name: lexranker_file
          step_args:
            scope: file
            update_score_key: lexrank_score_file
            update_percentile_key: lexrank_percentile_file
          depends_on: [ sentence-transformers ]

    - stage: Clusterer
      steps:
        - step: LouvainCommunityDetection
          name: louvain
          step_args:
            update_label_key: louvain_cluster_test
            assign_labels: gpt-3.5-turbo # RateLimit later
          depends_on: [ lexranker_file ]


query:

  name: basic_query

  stages:
    - stage: Retriever

      steps:
        - step: OCRetriever
          name: retriever
          step_args:
            query: how much wood could a woodchuck chuck if a woodchuck could chuck wood
            model_name: BAAI/bge-base-en-v1.5
            top_k: 100
            metadata_filters: { }
          depends_on: [ ]

    - stage: Reranker

      steps:
        - step: OCReranker
          name: simple_reranker
          step_args:
            query: how much wood could a woodchuck chuck if a woodchuck could chuck wood
            model_name: BAAI/bge-reranker-large
            top_k: 10
            metadata_filters: { }
          depends_on: [ retriever ]


hooks:

  name: basic_hooks

  stages:

    - stage: Scorer

      steps:
        - step: LexRank
          name: lexranker_global
          step_args:
            # you define the scope by metadata filters.
            # no metadata filters means global, i.e. all chunks in the kb
            scope_filters: { }
            update_score_key: lexrank_score_global
            update_percentile_key: lexrank_percentile_global
          depends_on: [ ]

    - stage: Clusterer

      steps:
        - step: LouvainCommunityDetection
          name: louvain_global
          step_args:
            # you define the scope by metadata filters.
            # no metadata filters means global, i.e. all chunks in the kb
            scope_filters: { "lexrank_percentile_global": { "gt": 0.5 } }
            update_label_key: louvain_cluster_test
            assign_labels: gpt-3.5-turbo # RateLimit later
          depends_on: [ ]

        - step: KmeansClassifier
          name: kmeans_global
          step_args:
            # you define the scope by metadata filters.
            # no metadata filters means global, i.e. all chunks in the kb
            scope_filters: { }
            update_label_key: kmeans_global_test
            assign_labels: gpt-3.5-turbo # RateLimit later
          depends_on: [ ]
